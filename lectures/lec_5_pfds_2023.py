# -*- coding: utf-8 -*-
"""PFDS_Lec4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Dp9T7hSvHB0nINTceqhPDLk2kWnOQ_6

Class
"""

class Animal:
    def say_hi(self):
        print("Hello!")

x = Animal()
x.say_hi()

"""## **The** $__init__$ method

is the Python equivalent of the C++ constructor in an object-oriented approach. The __init__ function is called every time an object is created from a class. The __init__ method lets the class initialize the object's attributes and serves no other purpose. It is only used within classes.

## Example: Rational Numbers

Here we'l make a class that holds rational numbers (fractions).  That is, numbers of the form
$$r = \frac{p}{q}$$
where $p$ and $q$ are integers
"""

import math
class Rational:
    def __init__(self, p, q=1):

        if q == 0:
            raise ValueError('Denominator must not be zero')
        if not isinstance(p, int):
            raise ValueError('Numerator must be an integer')
        if not isinstance(q, int):
            raise ValueError('Denominator must be an integer')

        g = math.gcd(p, q)

        self.p = p // g # integer division
        self.q = q // g

    # method to convert rational to float
    def __float__(self):
        return self.p / self.q

    # method to convert rational to string for printing
    def __str__(self):
        return f'{self.p}/{self.q}'

    def __repr__(self):
        return f'Rational({self.p}, {self.q})'

a = Rational(6, 4)
b = Rational(3, 2)

print(type(a))
print(f"a = {a}")
print(f"b = {b}")
print([a,b])
print(f"float(a) = {float(a)}")

"""## MODULES"""

# Importing a module

import math
math.sqrt(2)

# We can rename imported modules
import math as m
m.sqrt(2)

"""# In case we only need some part of a module"""

from math import sqrt
sqrt(2)

## BAD PRACTISE
from math import *
sqrt(2)

"""## Writing your own modules"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile firstmodule.py
# 
# def helloworld():
#      print('Hello, world!')
#      print('this is my first module')
# print('This is a script')
#

import firstmodule
firstmodule.helloworld()
#firstmodule.helloworld()

# Commented out IPython magic to ensure Python compatibility.
# Run the module as a script
# %run firstmodule.py

helloworld()

"""## By default, Python executes all code in a module when we import it.
However, we can make code run only when the file is the main file
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile firstmodule.py
# def helloworld():
#   print('hello, world!')
#   print('this is my first module')
# if __name__ == "__main__":
#   print('this only prints when run directly')

import firstmodule
firstmodule.helloworld()

# Commented out IPython magic to ensure Python compatibility.
# %%writefile sample_module.py
# x = 2
# 
# def func():
#     '''
#        This is a sample function
#        contains in a module.
#     '''
#     print('Hi from within a module!')
# 
# if __name__ == '__main__':
#     print("<> Running the module as a script! <>")
#     print("The Value of x is: ", x)
#     func()

import sample_module
print(dir(sample_module))

print(sample_module.x)

sample_module.func()

print(sample_module.func.__doc__)

# Commented out IPython magic to ensure Python compatibility.
# %run sample_module.py

"""## NumPy
Python provides only a handful of numeric types: ints, longs, floats, and complex numbers. NumPy implements one very useful numeric type: multidimensional arrays.
"""



import numpy as np

x = np.array([[0, 1], [1, 5]])
x

y = np.array([[4, 0], [0, 4]])
y

x + y

x ** 2

x @ y  # Matrix multiplication

np.sum(x)



"""Why???"""

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# x = np.random.rand(10000)
# y = np.random.rand(10000)
# z=0
# for i in range(10000):
#     z += x[i]*y[i]

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# x = np.random.rand(10000)
# y = np.random.rand(10000)
# z = np.dot(x,y)

"""## NumPy functions for creating arrays"""

X=np.zeros((10,10))
X

X.shape

Y=np.ones((10,10))
Y

2*Y+3

R=np.random.rand(5,5)
R

Rn = np.random.randn(5,5)
Rn

np.arange(1,100,2)

np.linspace(0,5,10)

X = np.arange(0,100)
X

X.reshape((10,10))

import numpy as np
a = np.ones(shape=(3,3))
print(a)

b = np.zeros(shape=(2,4,2))
print(b)

c = np.diag([1.,3.,5.])
print(c)

l1 = 3.0
l2 = 6.0
a = l1 + (l2 - l1)*np.random.rand(10) # 1D array with 10 uniform random numbers between [3.0, 6.0]
print(a)

np.random.seed(1234)
sigma = 1.0
mu = 0.0
b = sigma*np.random.randn(2,4) + mu     # 2D array of normal random numbers i.e.,Gaussian distribution with mu and sigma

print(b)
np.random.seed(1234)

a = np.array([1,2,3])
print(a.dtype)

b = np.array([1.,2.,3.])
bi = np.array([1.,2.,3.], dtype='int64')
print(b.dtype, bi.dtype)

c = np.array([True, False, True, False , False])
print(c.dtype)

d = np.zeros(shape=(4,), dtype='complex128')
d.real = np.random.rand(4)
d.imag = np.random.randn(4)
print(d.dtype, d)

"""##Plotting"""

import matplotlib.pyplot as plt

x = np.linspace(-5,5,100)
x
y = x*x
y

plt.plot(x,y)

plt.plot(y)

plt.plot(np.random.rand(10))

plt.plot(np.random.rand(10))
plt.plot(np.random.rand(10))

plt.plot(np.random.rand(10))
plt.plot(np.random.rand(10))
plt.legend(["curve1","curve2"])
plt.xlabel("X label")
plt.ylabel("Y label")
plt.title("Title")