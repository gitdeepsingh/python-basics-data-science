# -*- coding: utf-8 -*-
"""Lec_2_PFDS_2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rcYBYj5fu6StPhp6GLR5M7CPSLX3g9FP

# PFDS - Programming Fundamental for Data Science


## Course Instructor:

**Dr. Saurabh Das  (saurabh.das@iiti.ac.in)**

# Overview of Course

1. Python basics
1. NumPy basics
1. Linear algebra (NumPy)
1. Scientific computing (SciPy)

# Python

![python_vs_java](http://www.yurtopic.com/tech/programming/images/java-and-python.jpg)
"""

print('Hello, world!-Now')

"""# Value

- A value is the fundamental thing a program manipulate

- Values can be “Hello, world!”, 42, 12.34, True

- Values have types. . .   
  - **Boolean** True/False   
  - **String** “Hello, world!”   
  - **Integer** 92   
  - **Float** 3.1415   

Use type to find out the type of a variable, as in   
"""

type('2')

"""# Variables

- One of the most basic and powerful concepts is that of a variable.

- A variable assigns a name to a value

- One of the main differences in python compared to other languages you might be familiar with is that variables are not declared and are not strongly typed

- Everything after "#"  sign is a comment
"""

x = 1
print(x)

y = "test"

print(y)

x = 1
x = "string"
print(x)

x = 1
print(type(x))

x = "string"
print(type(x))

x = 0.1
print(type(x))

x = 0.1
type(x)

x

'a' == "A"

print(x) # yields 0.1

"""- Almost always preferred to use variables over values: Easier to update code
- Easier to understand code (useful naming)

# Practise 1: Multiplying two numbers and print the value (5 min)

"""

length = 4
height = 3
area = length * height
print(area)
type(area)

"""# Keywords
- Not allowed to use keywords, they define structure and rules of a language.
- Python has 29 keywords, they include:
  - and
  - def
  - for
  - return
  - is
  - in
  - **class**

# Basic Arithmetic

Operators for integers:
`+ - * / // % **`

Operators for floats:
`+ - * / **`

Boolean expressions:
* keywords: `True` and `False` (note capitalization)
* `==` equals: `5 == 5` yields `True`
* `!=` does not equal: `5 != 5` yields `False`
* `>` greater than: `5 > 4` yields `True`
* `>=` greater than or equal: `5 >= 5` yields `True`
* Similarly, we have `<` and `<=`.

Logical operators:
* `and`, `or`, and `not`
* `True and False`
* `True or False`
* `not True`
"""

a=2
b=5
print(a==b)
print(a,b)
b = 5
a = b
print(a)

print(z)

5/2

type(4/2)

4//2.1

5//2

4.0//2.0

10//3 #=1 remainder 2

5%3

5%3

4**3.0



type(4**3.0)

"""# Booleans"""

5 == 5

5==5.0

not (5 == 5.0) #equivalent to 5 != 5.0

True and True

True and False

True or False

not True

'a' == 'A.lower()'



"""# Strings

Concatenation: `str1 + str2`

Printing: `print(str1)`
"""

str1 = "Hello, "
str2 = "World!"
str3 = str1 + str2
str3

print(str3 + "   b")

"""#Formatting:
## Enclose your variable within the {} to display it's value in the output

"""

x = 23
y = 52
name = "Alice"

str1 = f"{name}'s numbers are {x} and {y}, and their sum is {x + y}"
str1 += "b"
print(str1)

type(str1+str2)

name = "Datacamp"
type_of_company = "Educational"

print(f"{name} is an {type_of_company} company.")

str1 = "a: %s" % "hi"
print(str1)
str2 = "b: %f, %s, %d" % (1.0, 'hello', 5.2)
print(str2)
str3 = "c: {}".format(3.14)
print(str3)

# some methods
str1 = "Hello, World!"
print(str1)
print(str1.upper())
print(str1.lower())

str1 = str1.lower()
str1

str1.replace?

str1.replace('l', 'k')

str1 = "Apple"
print(str1)

print(str1)

A = 'A'
A.lower?

"""# Modules

- Not all functionality avaible comes automatically when starting python


- We can add extra functionality by importing modules:

"""

import math
?math.exp

import math
print(math.pi)